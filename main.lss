
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00007b80  00000414  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000380  00007800  00007800  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008f  00800108  00800108  0000041c  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  0000041c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000ec  00000000  00000000  0000043c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000365  00000000  00000000  00000528  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000183  00000000  00000000  0000088d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000340  00000000  00000000  00000a10  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000080  00000000  00000000  00000d50  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001bd  00000000  00000000  00000dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000162  00000000  00000000  00000f8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000010ef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00007800 <__vectors>:
    7800:	0c 94 34 3c 	jmp	0x7868	; 0x7868 <__ctors_end>
    7804:	0c 94 51 3c 	jmp	0x78a2	; 0x78a2 <__bad_interrupt>
    7808:	0c 94 51 3c 	jmp	0x78a2	; 0x78a2 <__bad_interrupt>
    780c:	0c 94 51 3c 	jmp	0x78a2	; 0x78a2 <__bad_interrupt>
    7810:	0c 94 51 3c 	jmp	0x78a2	; 0x78a2 <__bad_interrupt>
    7814:	0c 94 51 3c 	jmp	0x78a2	; 0x78a2 <__bad_interrupt>
    7818:	0c 94 51 3c 	jmp	0x78a2	; 0x78a2 <__bad_interrupt>
    781c:	0c 94 51 3c 	jmp	0x78a2	; 0x78a2 <__bad_interrupt>
    7820:	0c 94 51 3c 	jmp	0x78a2	; 0x78a2 <__bad_interrupt>
    7824:	0c 94 51 3c 	jmp	0x78a2	; 0x78a2 <__bad_interrupt>
    7828:	0c 94 51 3c 	jmp	0x78a2	; 0x78a2 <__bad_interrupt>
    782c:	0c 94 51 3c 	jmp	0x78a2	; 0x78a2 <__bad_interrupt>
    7830:	0c 94 51 3c 	jmp	0x78a2	; 0x78a2 <__bad_interrupt>
    7834:	0c 94 51 3c 	jmp	0x78a2	; 0x78a2 <__bad_interrupt>
    7838:	0c 94 51 3c 	jmp	0x78a2	; 0x78a2 <__bad_interrupt>
    783c:	0c 94 51 3c 	jmp	0x78a2	; 0x78a2 <__bad_interrupt>
    7840:	0c 94 51 3c 	jmp	0x78a2	; 0x78a2 <__bad_interrupt>
    7844:	0c 94 51 3c 	jmp	0x78a2	; 0x78a2 <__bad_interrupt>
    7848:	0c 94 51 3c 	jmp	0x78a2	; 0x78a2 <__bad_interrupt>
    784c:	0c 94 51 3c 	jmp	0x78a2	; 0x78a2 <__bad_interrupt>
    7850:	0c 94 51 3c 	jmp	0x78a2	; 0x78a2 <__bad_interrupt>
    7854:	0c 94 51 3c 	jmp	0x78a2	; 0x78a2 <__bad_interrupt>
    7858:	0c 94 51 3c 	jmp	0x78a2	; 0x78a2 <__bad_interrupt>
    785c:	0c 94 51 3c 	jmp	0x78a2	; 0x78a2 <__bad_interrupt>
    7860:	0c 94 51 3c 	jmp	0x78a2	; 0x78a2 <__bad_interrupt>
    7864:	0c 94 51 3c 	jmp	0x78a2	; 0x78a2 <__bad_interrupt>

00007868 <__ctors_end>:
    7868:	11 24       	eor	r1, r1
    786a:	1f be       	out	0x3f, r1	; 63
    786c:	cf ef       	ldi	r28, 0xFF	; 255
    786e:	d8 e0       	ldi	r29, 0x08	; 8
    7870:	de bf       	out	0x3e, r29	; 62
    7872:	cd bf       	out	0x3d, r28	; 61

00007874 <__do_copy_data>:
    7874:	11 e0       	ldi	r17, 0x01	; 1
    7876:	a0 e0       	ldi	r26, 0x00	; 0
    7878:	b1 e0       	ldi	r27, 0x01	; 1
    787a:	e0 e8       	ldi	r30, 0x80	; 128
    787c:	fb e7       	ldi	r31, 0x7B	; 123
    787e:	02 c0       	rjmp	.+4      	; 0x7884 <.do_copy_data_start>

00007880 <.do_copy_data_loop>:
    7880:	05 90       	lpm	r0, Z+
    7882:	0d 92       	st	X+, r0

00007884 <.do_copy_data_start>:
    7884:	a8 30       	cpi	r26, 0x08	; 8
    7886:	b1 07       	cpc	r27, r17
    7888:	d9 f7       	brne	.-10     	; 0x7880 <.do_copy_data_loop>

0000788a <__do_clear_bss>:
    788a:	11 e0       	ldi	r17, 0x01	; 1
    788c:	a8 e0       	ldi	r26, 0x08	; 8
    788e:	b1 e0       	ldi	r27, 0x01	; 1
    7890:	01 c0       	rjmp	.+2      	; 0x7894 <.do_clear_bss_start>

00007892 <.do_clear_bss_loop>:
    7892:	1d 92       	st	X+, r1

00007894 <.do_clear_bss_start>:
    7894:	a7 39       	cpi	r26, 0x97	; 151
    7896:	b1 07       	cpc	r27, r17
    7898:	e1 f7       	brne	.-8      	; 0x7892 <.do_clear_bss_loop>
    789a:	0e 94 a1 3d 	call	0x7b42	; 0x7b42 <main>
    789e:	0c 94 be 3d 	jmp	0x7b7c	; 0x7b7c <_exit>

000078a2 <__bad_interrupt>:
    78a2:	0c 94 00 3c 	jmp	0x7800	; 0x7800 <__vectors>

000078a6 <CLEAR_peripherals>:
uint8_t  BOOT_buffer[BOOT_PAGE_SIZE_BYTES];
uint8_t  allow_erase=0,error=0;
uint16_t INCOMING_PAGE=0;

void CLEAR_peripherals(void){
UBRR0H=0x00;UBRR0L=0x00;UCSR0B=0x00;UCSR0C=0x00;
    78a6:	10 92 c5 00 	sts	0x00C5, r1
    78aa:	10 92 c4 00 	sts	0x00C4, r1
    78ae:	10 92 c1 00 	sts	0x00C1, r1
    78b2:	10 92 c2 00 	sts	0x00C2, r1
TCCR1A=0x00;TCCR1B=0x00;TCCR1C=0x00;TCNT1 =0x00;
    78b6:	10 92 80 00 	sts	0x0080, r1
    78ba:	10 92 81 00 	sts	0x0081, r1
    78be:	10 92 82 00 	sts	0x0082, r1
    78c2:	10 92 85 00 	sts	0x0085, r1
    78c6:	10 92 84 00 	sts	0x0084, r1
TIMSK2=0x00;ASSR  =0x00;TCNT2 =0x00;TCCR2A=0x00;
    78ca:	10 92 70 00 	sts	0x0070, r1
    78ce:	10 92 b6 00 	sts	0x00B6, r1
    78d2:	10 92 b2 00 	sts	0x00B2, r1
    78d6:	10 92 b0 00 	sts	0x00B0, r1
TCCR2B=0x00;TIFR2 =0x00;
    78da:	10 92 b1 00 	sts	0x00B1, r1
    78de:	17 ba       	out	0x17, r1	; 23
}
    78e0:	08 95       	ret

000078e2 <UART_TX_SINGLE>:



void UART_TX_SINGLE(uint8_t x){
    78e2:	98 2f       	mov	r25, r24
while(!(UCSR0A & (1<<UDRE0)));
    78e4:	80 91 c0 00 	lds	r24, 0x00C0
    78e8:	85 ff       	sbrs	r24, 5
    78ea:	fc cf       	rjmp	.-8      	; 0x78e4 <UART_TX_SINGLE+0x2>
UDR0=x;
    78ec:	90 93 c6 00 	sts	0x00C6, r25
while(!(UCSR0A & (1<<TXC0)));
    78f0:	80 91 c0 00 	lds	r24, 0x00C0
    78f4:	86 ff       	sbrs	r24, 6
    78f6:	fc cf       	rjmp	.-8      	; 0x78f0 <UART_TX_SINGLE+0xe>
}
    78f8:	08 95       	ret

000078fa <boot_program_page>:

void boot_program_page (uint32_t page, uint8_t *buf){
    78fa:	0f 93       	push	r16
    78fc:	1f 93       	push	r17
    78fe:	cf 93       	push	r28
    7900:	df 93       	push	r29
    7902:	da 01       	movw	r26, r20

    uint16_t i;
    uint8_t sreg;
    sreg = SREG;
    7904:	0f b7       	in	r16, 0x3f	; 63
    cli();
    7906:	f8 94       	cli
    eeprom_busy_wait ();
    7908:	f9 99       	sbic	0x1f, 1	; 31
    790a:	fe cf       	rjmp	.-4      	; 0x7908 <boot_program_page+0xe>
    boot_page_erase (page);
    790c:	ab 01       	movw	r20, r22
    790e:	83 e0       	ldi	r24, 0x03	; 3
    7910:	fb 01       	movw	r30, r22
    7912:	80 93 57 00 	sts	0x0057, r24
    7916:	e8 95       	spm
    boot_spm_busy_wait (); 
    7918:	07 b6       	in	r0, 0x37	; 55
    791a:	00 fc       	sbrc	r0, 0
    791c:	fd cf       	rjmp	.-6      	; 0x7918 <boot_program_page+0x1e>
    791e:	fa 01       	movw	r30, r20
	
    for (i=0; i<SPM_PAGESIZE; i+=2)
    {
        uint16_t w = *buf++;
        w += (*buf++) << 8;
        boot_page_fill (page + i, w);
    7920:	11 e0       	ldi	r17, 0x01	; 1
    cli();
    eeprom_busy_wait ();
    boot_page_erase (page);
    boot_spm_busy_wait (); 
	
    for (i=0; i<SPM_PAGESIZE; i+=2)
    7922:	ba 01       	movw	r22, r20
    7924:	60 58       	subi	r22, 0x80	; 128
    7926:	7f 4f       	sbci	r23, 0xFF	; 255
    {
        uint16_t w = *buf++;
    7928:	8c 91       	ld	r24, X
        w += (*buf++) << 8;
    792a:	11 96       	adiw	r26, 0x01	; 1
    792c:	3c 91       	ld	r19, X
    792e:	11 97       	sbiw	r26, 0x01	; 1
    7930:	20 e0       	ldi	r18, 0x00	; 0
    7932:	e9 01       	movw	r28, r18
    7934:	c8 0f       	add	r28, r24
    7936:	d1 1d       	adc	r29, r1
while(!(UCSR0A & (1<<UDRE0)));
UDR0=x;
while(!(UCSR0A & (1<<TXC0)));
}

void boot_program_page (uint32_t page, uint8_t *buf){
    7938:	12 96       	adiw	r26, 0x02	; 2
	
    for (i=0; i<SPM_PAGESIZE; i+=2)
    {
        uint16_t w = *buf++;
        w += (*buf++) << 8;
        boot_page_fill (page + i, w);
    793a:	0e 01       	movw	r0, r28
    793c:	10 93 57 00 	sts	0x0057, r17
    7940:	e8 95       	spm
    7942:	11 24       	eor	r1, r1
    7944:	32 96       	adiw	r30, 0x02	; 2
    cli();
    eeprom_busy_wait ();
    boot_page_erase (page);
    boot_spm_busy_wait (); 
	
    for (i=0; i<SPM_PAGESIZE; i+=2)
    7946:	e6 17       	cp	r30, r22
    7948:	f7 07       	cpc	r31, r23
    794a:	71 f7       	brne	.-36     	; 0x7928 <boot_program_page+0x2e>
        uint16_t w = *buf++;
        w += (*buf++) << 8;
        boot_page_fill (page + i, w);
    }
	
    boot_page_write (page); 
    794c:	85 e0       	ldi	r24, 0x05	; 5
    794e:	fa 01       	movw	r30, r20
    7950:	80 93 57 00 	sts	0x0057, r24
    7954:	e8 95       	spm
    boot_spm_busy_wait();   
    7956:	07 b6       	in	r0, 0x37	; 55
    7958:	00 fc       	sbrc	r0, 0
    795a:	fd cf       	rjmp	.-6      	; 0x7956 <boot_program_page+0x5c>
    boot_rww_enable ();
    795c:	81 e1       	ldi	r24, 0x11	; 17
    795e:	80 93 57 00 	sts	0x0057, r24
    7962:	e8 95       	spm
    SREG = sreg;
    7964:	0f bf       	out	0x3f, r16	; 63
}
    7966:	df 91       	pop	r29
    7968:	cf 91       	pop	r28
    796a:	1f 91       	pop	r17
    796c:	0f 91       	pop	r16
    796e:	08 95       	ret

00007970 <chip_erase>:


void chip_erase(uint8_t strt, uint8_t stop){
    7970:	ef 92       	push	r14
    7972:	ff 92       	push	r15
    7974:	0f 93       	push	r16
    7976:	1f 93       	push	r17
    7978:	df 93       	push	r29
    797a:	cf 93       	push	r28
    797c:	cd b7       	in	r28, 0x3d	; 61
    797e:	de b7       	in	r29, 0x3e	; 62
    7980:	c0 58       	subi	r28, 0x80	; 128
    7982:	d0 40       	sbci	r29, 0x00	; 0
    7984:	0f b6       	in	r0, 0x3f	; 63
    7986:	f8 94       	cli
    7988:	de bf       	out	0x3e, r29	; 62
    798a:	0f be       	out	0x3f, r0	; 63
    798c:	cd bf       	out	0x3d, r28	; 61
    798e:	06 2f       	mov	r16, r22
    7990:	90 e0       	ldi	r25, 0x00	; 0
uint8_t erase_buf[BOOT_PAGE_SIZE_BYTES];
for(uint8_t i=0;i<BOOT_PAGE_SIZE_BYTES;i++){
    erase_buf[i]=0xFF;
    7992:	9e 01       	movw	r18, r28
    7994:	2f 5f       	subi	r18, 0xFF	; 255
    7996:	3f 4f       	sbci	r19, 0xFF	; 255
    7998:	4f ef       	ldi	r20, 0xFF	; 255
    799a:	f9 01       	movw	r30, r18
    799c:	e9 0f       	add	r30, r25
    799e:	f1 1d       	adc	r31, r1
    79a0:	40 83       	st	Z, r20
}


void chip_erase(uint8_t strt, uint8_t stop){
uint8_t erase_buf[BOOT_PAGE_SIZE_BYTES];
for(uint8_t i=0;i<BOOT_PAGE_SIZE_BYTES;i++){
    79a2:	9f 5f       	subi	r25, 0xFF	; 255
    79a4:	90 38       	cpi	r25, 0x80	; 128
    79a6:	c9 f7       	brne	.-14     	; 0x799a <chip_erase+0x2a>
    79a8:	18 2f       	mov	r17, r24
    erase_buf[i]=0xFF;
	}
for(uint8_t page_erase=strt;page_erase<stop;page_erase++){
    boot_program_page((page_erase*BOOT_PAGE_SIZE_BYTES),erase_buf);
    79aa:	7e 01       	movw	r14, r28
    79ac:	08 94       	sec
    79ae:	e1 1c       	adc	r14, r1
    79b0:	f1 1c       	adc	r15, r1
    79b2:	0f c0       	rjmp	.+30     	; 0x79d2 <chip_erase+0x62>
    79b4:	61 2f       	mov	r22, r17
    79b6:	70 e0       	ldi	r23, 0x00	; 0
    79b8:	76 95       	lsr	r23
    79ba:	76 2f       	mov	r23, r22
    79bc:	66 27       	eor	r22, r22
    79be:	77 95       	ror	r23
    79c0:	67 95       	ror	r22
    79c2:	88 27       	eor	r24, r24
    79c4:	77 fd       	sbrc	r23, 7
    79c6:	80 95       	com	r24
    79c8:	98 2f       	mov	r25, r24
    79ca:	a7 01       	movw	r20, r14
    79cc:	0e 94 7d 3c 	call	0x78fa	; 0x78fa <boot_program_page>
void chip_erase(uint8_t strt, uint8_t stop){
uint8_t erase_buf[BOOT_PAGE_SIZE_BYTES];
for(uint8_t i=0;i<BOOT_PAGE_SIZE_BYTES;i++){
    erase_buf[i]=0xFF;
	}
for(uint8_t page_erase=strt;page_erase<stop;page_erase++){
    79d0:	1f 5f       	subi	r17, 0xFF	; 255
    79d2:	10 17       	cp	r17, r16
    79d4:	78 f3       	brcs	.-34     	; 0x79b4 <chip_erase+0x44>
    boot_program_page((page_erase*BOOT_PAGE_SIZE_BYTES),erase_buf);
	}
}
    79d6:	c0 58       	subi	r28, 0x80	; 128
    79d8:	df 4f       	sbci	r29, 0xFF	; 255
    79da:	0f b6       	in	r0, 0x3f	; 63
    79dc:	f8 94       	cli
    79de:	de bf       	out	0x3e, r29	; 62
    79e0:	0f be       	out	0x3f, r0	; 63
    79e2:	cd bf       	out	0x3d, r28	; 61
    79e4:	cf 91       	pop	r28
    79e6:	df 91       	pop	r29
    79e8:	1f 91       	pop	r17
    79ea:	0f 91       	pop	r16
    79ec:	ff 90       	pop	r15
    79ee:	ef 90       	pop	r14
    79f0:	08 95       	ret

000079f2 <UART_rx>:


uint8_t UART_rx(void){
TCNT1=0;
    79f2:	10 92 85 00 	sts	0x0085, r1
    79f6:	10 92 84 00 	sts	0x0084, r1
    79fa:	13 c0       	rjmp	.+38     	; 0x7a22 <UART_rx+0x30>
while((UCSR0A & (1<<RXC0))==0)
   {
     if(TCNT1>PROCESSOR_RX_WAIT)
    79fc:	80 91 84 00 	lds	r24, 0x0084
    7a00:	90 91 85 00 	lds	r25, 0x0085
    7a04:	89 5e       	subi	r24, 0xE9	; 233
    7a06:	93 40       	sbci	r25, 0x03	; 3
    7a08:	60 f0       	brcs	.+24     	; 0x7a22 <UART_rx+0x30>
	 {
	   if(allow_erase==1){chip_erase(0,BOOT_PAGE_STRT_ADDR);}
    7a0a:	80 91 08 01 	lds	r24, 0x0108
    7a0e:	81 30       	cpi	r24, 0x01	; 1
    7a10:	21 f4       	brne	.+8      	; 0x7a1a <UART_rx+0x28>
    7a12:	80 e0       	ldi	r24, 0x00	; 0
    7a14:	60 ee       	ldi	r22, 0xE0	; 224
    7a16:	0e 94 b8 3c 	call	0x7970	; 0x7970 <chip_erase>
	   CLEAR_peripherals();
    7a1a:	0e 94 53 3c 	call	0x78a6	; 0x78a6 <CLEAR_peripherals>
	   JUMP_APP();
    7a1e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>
}


uint8_t UART_rx(void){
TCNT1=0;
while((UCSR0A & (1<<RXC0))==0)
    7a22:	80 91 c0 00 	lds	r24, 0x00C0
    7a26:	87 ff       	sbrs	r24, 7
    7a28:	e9 cf       	rjmp	.-46     	; 0x79fc <UART_rx+0xa>
	   if(allow_erase==1){chip_erase(0,BOOT_PAGE_STRT_ADDR);}
	   CLEAR_peripherals();
	   JUMP_APP();
	  }
	}
return UDR0;
    7a2a:	80 91 c6 00 	lds	r24, 0x00C6
}
    7a2e:	08 95       	ret

00007a30 <Page_write_handler>:


void Page_write_handler(void)
{
    7a30:	ef 92       	push	r14
    7a32:	ff 92       	push	r15
    7a34:	0f 93       	push	r16
    7a36:	1f 93       	push	r17
    7a38:	cf 93       	push	r28
    7a3a:	df 93       	push	r29
    allow_erase=0;
    7a3c:	10 92 08 01 	sts	0x0108, r1
    UART_TX_SINGLE(BOOT_READY_FOR_ENCRYPT_KEY);
    7a40:	8b e1       	ldi	r24, 0x1B	; 27
    7a42:	0e 94 71 3c 	call	0x78e2	; 0x78e2 <UART_TX_SINGLE>
    7a46:	cc e8       	ldi	r28, 0x8C	; 140
    7a48:	d1 e0       	ldi	r29, 0x01	; 1

    for(uint8_t i=0;i<11;i++){RCVD_ENCRPT_KEY[i]=UART_rx();}
    7a4a:	0e 94 f9 3c 	call	0x79f2	; 0x79f2 <UART_rx>
    7a4e:	89 93       	st	Y+, r24
    7a50:	81 e0       	ldi	r24, 0x01	; 1
    7a52:	c7 39       	cpi	r28, 0x97	; 151
    7a54:	d8 07       	cpc	r29, r24
    7a56:	c9 f7       	brne	.-14     	; 0x7a4a <Page_write_handler+0x1a>
    7a58:	60 91 09 01 	lds	r22, 0x0109
    7a5c:	20 e0       	ldi	r18, 0x00	; 0
    7a5e:	30 e0       	ldi	r19, 0x00	; 0
    for(uint8_t i=0;i<8;i++){if(ENCRYPT_KEY[i]!=RCVD_ENCRPT_KEY[i]){error=1;}}
    7a60:	f9 01       	movw	r30, r18
    7a62:	e0 50       	subi	r30, 0x00	; 0
    7a64:	ff 4f       	sbci	r31, 0xFF	; 255
    7a66:	d9 01       	movw	r26, r18
    7a68:	a4 57       	subi	r26, 0x74	; 116
    7a6a:	be 4f       	sbci	r27, 0xFE	; 254
    7a6c:	90 81       	ld	r25, Z
    7a6e:	8c 91       	ld	r24, X
    7a70:	98 13       	cpse	r25, r24
    7a72:	61 e0       	ldi	r22, 0x01	; 1
    7a74:	2f 5f       	subi	r18, 0xFF	; 255
    7a76:	3f 4f       	sbci	r19, 0xFF	; 255
    7a78:	28 30       	cpi	r18, 0x08	; 8
    7a7a:	31 05       	cpc	r19, r1
    7a7c:	89 f7       	brne	.-30     	; 0x7a60 <Page_write_handler+0x30>
    7a7e:	60 93 09 01 	sts	0x0109, r22
    INCOMING_PAGE=RCVD_ENCRPT_KEY[8]*100+RCVD_ENCRPT_KEY[9]*10+RCVD_ENCRPT_KEY[10];
    7a82:	90 91 94 01 	lds	r25, 0x0194
    7a86:	84 e6       	ldi	r24, 0x64	; 100
    7a88:	98 9f       	mul	r25, r24
    7a8a:	a0 01       	movw	r20, r0
    7a8c:	11 24       	eor	r1, r1
    7a8e:	80 91 95 01 	lds	r24, 0x0195
    7a92:	2a e0       	ldi	r18, 0x0A	; 10
    7a94:	82 9f       	mul	r24, r18
    7a96:	c0 01       	movw	r24, r0
    7a98:	11 24       	eor	r1, r1
    7a9a:	48 0f       	add	r20, r24
    7a9c:	59 1f       	adc	r21, r25
    7a9e:	80 91 96 01 	lds	r24, 0x0196
    7aa2:	48 0f       	add	r20, r24
    7aa4:	51 1d       	adc	r21, r1
    7aa6:	50 93 0b 01 	sts	0x010B, r21
    7aaa:	40 93 0a 01 	sts	0x010A, r20

    if(error!=1)
    7aae:	61 30       	cpi	r22, 0x01	; 1
    7ab0:	d1 f1       	breq	.+116    	; 0x7b26 <Page_write_handler+0xf6>
       {
        
        if(INCOMING_PAGE!=0)
    7ab2:	45 2b       	or	r20, r21
    7ab4:	d9 f1       	breq	.+118    	; 0x7b2c <Page_write_handler+0xfc>
           {
             UART_TX_SINGLE(BOOT_READY_FOR_DATA);
    7ab6:	88 e1       	ldi	r24, 0x18	; 24
    7ab8:	0e 94 71 3c 	call	0x78e2	; 0x78e2 <UART_TX_SINGLE>
             allow_erase=1;
    7abc:	81 e0       	ldi	r24, 0x01	; 1
    7abe:	80 93 08 01 	sts	0x0108, r24
    7ac2:	ee 24       	eor	r14, r14
    7ac4:	ff 24       	eor	r15, r15
    7ac6:	00 e0       	ldi	r16, 0x00	; 0
    7ac8:	10 e0       	ldi	r17, 0x00	; 0
    7aca:	16 c0       	rjmp	.+44     	; 0x7af8 <Page_write_handler+0xc8>
             for(uint16_t page=0;page<INCOMING_PAGE;page++)
	           {
                 
                 for(uint16_t i=0;i<BOOT_PAGE_SIZE_BYTES;i++)
		           {
		             BOOT_buffer[i]=UART_rx();
    7acc:	0e 94 f9 3c 	call	0x79f2	; 0x79f2 <UART_rx>
    7ad0:	89 93       	st	Y+, r24
             UART_TX_SINGLE(BOOT_READY_FOR_DATA);
             allow_erase=1;
             for(uint16_t page=0;page<INCOMING_PAGE;page++)
	           {
                 
                 for(uint16_t i=0;i<BOOT_PAGE_SIZE_BYTES;i++)
    7ad2:	81 e0       	ldi	r24, 0x01	; 1
    7ad4:	cc 38       	cpi	r28, 0x8C	; 140
    7ad6:	d8 07       	cpc	r29, r24
    7ad8:	c9 f7       	brne	.-14     	; 0x7acc <Page_write_handler+0x9c>
		           {
		             BOOT_buffer[i]=UART_rx();
		            }
		         boot_program_page((page*BOOT_PAGE_SIZE_BYTES),BOOT_buffer);
    7ada:	b8 01       	movw	r22, r16
    7adc:	80 e0       	ldi	r24, 0x00	; 0
    7ade:	90 e0       	ldi	r25, 0x00	; 0
    7ae0:	4c e0       	ldi	r20, 0x0C	; 12
    7ae2:	51 e0       	ldi	r21, 0x01	; 1
    7ae4:	0e 94 7d 3c 	call	0x78fa	; 0x78fa <boot_program_page>
		         UART_TX_SINGLE(BOOT_PAGE_COMPLETE);
    7ae8:	87 e1       	ldi	r24, 0x17	; 23
    7aea:	0e 94 71 3c 	call	0x78e2	; 0x78e2 <UART_TX_SINGLE>
        
        if(INCOMING_PAGE!=0)
           {
             UART_TX_SINGLE(BOOT_READY_FOR_DATA);
             allow_erase=1;
             for(uint16_t page=0;page<INCOMING_PAGE;page++)
    7aee:	08 94       	sec
    7af0:	e1 1c       	adc	r14, r1
    7af2:	f1 1c       	adc	r15, r1
    7af4:	00 58       	subi	r16, 0x80	; 128
    7af6:	1f 4f       	sbci	r17, 0xFF	; 255
    7af8:	80 91 0a 01 	lds	r24, 0x010A
    7afc:	90 91 0b 01 	lds	r25, 0x010B
    7b00:	e8 16       	cp	r14, r24
    7b02:	f9 06       	cpc	r15, r25
    7b04:	18 f4       	brcc	.+6      	; 0x7b0c <Page_write_handler+0xdc>
    7b06:	cc e0       	ldi	r28, 0x0C	; 12
    7b08:	d1 e0       	ldi	r29, 0x01	; 1
    7b0a:	e0 cf       	rjmp	.-64     	; 0x7acc <Page_write_handler+0x9c>
		             BOOT_buffer[i]=UART_rx();
		            }
		         boot_program_page((page*BOOT_PAGE_SIZE_BYTES),BOOT_buffer);
		         UART_TX_SINGLE(BOOT_PAGE_COMPLETE);
	            }
			 error=0;
    7b0c:	10 92 09 01 	sts	0x0109, r1
             chip_erase(INCOMING_PAGE,BOOT_PAGE_STRT_ADDR);
    7b10:	60 ee       	ldi	r22, 0xE0	; 224
    7b12:	0e 94 b8 3c 	call	0x7970	; 0x7970 <chip_erase>
             UART_TX_SINGLE(BOOT_COMPLETE);
    7b16:	86 e1       	ldi	r24, 0x16	; 22
    7b18:	0e 94 71 3c 	call	0x78e2	; 0x78e2 <UART_TX_SINGLE>
             while(UART_rx()!=BOOT_EXIT);
    7b1c:	0e 94 f9 3c 	call	0x79f2	; 0x79f2 <UART_rx>
    7b20:	85 31       	cpi	r24, 0x15	; 21
    7b22:	e1 f7       	brne	.-8      	; 0x7b1c <Page_write_handler+0xec>
    7b24:	03 c0       	rjmp	.+6      	; 0x7b2c <Page_write_handler+0xfc>
	        }
        }
		
    else
	{
        UART_TX_SINGLE(BOOT_RETRY);
    7b26:	89 e1       	ldi	r24, 0x19	; 25
    7b28:	0e 94 71 3c 	call	0x78e2	; 0x78e2 <UART_TX_SINGLE>
    }

CLEAR_peripherals();
    7b2c:	0e 94 53 3c 	call	0x78a6	; 0x78a6 <CLEAR_peripherals>
JUMP_APP();
    7b30:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>
}
    7b34:	df 91       	pop	r29
    7b36:	cf 91       	pop	r28
    7b38:	1f 91       	pop	r17
    7b3a:	0f 91       	pop	r16
    7b3c:	ff 90       	pop	r15
    7b3e:	ef 90       	pop	r14
    7b40:	08 95       	ret

00007b42 <main>:
#include "ota.h"


int main(void){

WDT_clear();
    7b42:	f8 94       	cli
    7b44:	14 be       	out	0x34, r1	; 52
    7b46:	e0 e6       	ldi	r30, 0x60	; 96
    7b48:	f0 e0       	ldi	r31, 0x00	; 0
    7b4a:	98 e1       	ldi	r25, 0x18	; 24
    7b4c:	90 83       	st	Z, r25
    7b4e:	10 82       	st	Z, r1
//OSC_CAL();
UART_init();
    7b50:	10 92 c5 00 	sts	0x00C5, r1
    7b54:	8b e0       	ldi	r24, 0x0B	; 11
    7b56:	80 93 c4 00 	sts	0x00C4, r24
    7b5a:	85 e0       	ldi	r24, 0x05	; 5
    7b5c:	80 93 81 00 	sts	0x0081, r24
    7b60:	90 93 c1 00 	sts	0x00C1, r25
    7b64:	86 e0       	ldi	r24, 0x06	; 6
    7b66:	80 93 c2 00 	sts	0x00C2, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    7b6a:	80 e0       	ldi	r24, 0x00	; 0
    7b6c:	98 e4       	ldi	r25, 0x48	; 72
    7b6e:	01 97       	sbiw	r24, 0x01	; 1
    7b70:	f1 f7       	brne	.-4      	; 0x7b6e <main+0x2c>
_delay_ms(20);
Page_write_handler();
    7b72:	0e 94 18 3d 	call	0x7a30	; 0x7a30 <Page_write_handler>

    7b76:	80 e0       	ldi	r24, 0x00	; 0
    7b78:	90 e0       	ldi	r25, 0x00	; 0
    7b7a:	08 95       	ret

00007b7c <_exit>:
    7b7c:	f8 94       	cli

00007b7e <__stop_program>:
    7b7e:	ff cf       	rjmp	.-2      	; 0x7b7e <__stop_program>
